import os
import subprocess
import sys
import shutil
from pathlib import Path
from PIL import Image

def convert_png_to_ico(png_path, ico_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PNG –≤ ICO –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    if os.path.exists(png_path) and not os.path.exists(ico_path):
        try:
            img = Image.open(png_path)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏
            img.save(ico_path, format='ICO', sizes=[(16,16), (32,32), (48,48), (64,64)])
            print(f"‚úÖ –ò–∫–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {ico_path}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∫–æ–Ω–∫–∏: {e}")
            return False
    return True

def build_exe():
    """–°–±–æ—Ä–∫–∞ EXE —Ñ–∞–π–ª–∞ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º DLL –∏ –∏–∫–æ–Ω–∫–∏"""
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PNG –≤ ICO –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    ico_path = "printer_icon.ico"
    if not os.path.exists(ico_path) and os.path.exists("printer.png"):
        if not convert_png_to_ico("printer.png", ico_path):
            print("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏–∫–æ–Ω–∫–∏")
            ico_path = None
    elif not os.path.exists(ico_path):
        print("‚ùå –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏–∫–æ–Ω–∫–∏")
        ico_path = None
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –∫ pylibdmtx
    try:
        import pylibdmtx
        lib_path = Path(pylibdmtx.__file__).parent
        print(f"–ü—É—Ç—å –∫ pylibdmtx: {lib_path}")
        
        # –ò—â–µ–º DLL —Ñ–∞–π–ª—ã
        dll_files = []
        for root, dirs, files in os.walk(lib_path):
            for file in files:
                if file.endswith('.dll'):
                    dll_files.append(os.path.join(root, file))
        
        if not dll_files:
            print("‚ùå DLL —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return False
            
        print(f"–ù–∞–π–¥–µ–Ω–æ DLL —Ñ–∞–π–ª–æ–≤: {len(dll_files)}")
        for dll in dll_files:
            print(f"  - {dll}")
            
    except ImportError:
        print("‚ùå pylibdmtx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏
    cmd = [
        "pyinstaller",
        "--onefile",
        "--windowed",
        "--name=DataMatrixPrinter",
        "--clean",
        "--add-data", f"{lib_path}{os.pathsep}pylibdmtx",
        "--hidden-import=win32print",
        "--hidden-import=win32ui", 
        "--hidden-import=win32con",
        "--hidden-import=sqlite3",
        "--hidden-import=PIL",
        "--hidden-import=PIL.Image",
        "--hidden-import=PIL.ImageWin",
        "--hidden-import=PyQt5",
        "--hidden-import=PyQt5.QtCore",
        "--hidden-import=PyQt5.QtGui",
        "--hidden-import=PyQt5.QtWidgets",
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if ico_path and os.path.exists(ico_path):
        cmd.extend(["--icon", ico_path])
        print(f"üé® –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É: {ico_path}")
    
    cmd.append("main.py")
    
    print("üî® –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É EXE —Ñ–∞–π–ª–∞...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print("‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        exe_path = os.path.join('dist', 'DataMatrixPrinter.exe')
        if os.path.exists(exe_path):
            size_mb = os.path.getsize(exe_path) / (1024 * 1024)
            print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.1f} MB")
            print(f"üìÅ EXE —Ñ–∞–π–ª: {exe_path}")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏:")
        print(f"STDERR: {e.stderr}")
        
        # –ü—Ä–æ–±—É–µ–º –±–µ–∑ DLL –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        print("üîÑ –ü—Ä–æ–±—É–µ–º —Å–±–æ—Ä–∫—É –±–µ–∑ —è–≤–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è DLL...")
        cmd_simple = [c for c in cmd if '--add-data' not in c]
        try:
            result = subprocess.run(cmd_simple, capture_output=True, text=True, check=True)
            print("‚úÖ –°–±–æ—Ä–∫–∞ –±–µ–∑ DLL –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        except:
            return False

if __name__ == "__main__":
    print("üöÄ –°–±–æ—Ä–∫–∞ DataMatrix Printer —Å –∏–∫–æ–Ω–∫–æ–π –∏ DLL")
    print("=" * 50)
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏
    if os.path.exists("build"):
        shutil.rmtree("build")
    if os.path.exists("dist"):
        shutil.rmtree("dist")
    if os.path.exists("DataMatrixPrinter.spec"):
        os.remove("DataMatrixPrinter.spec")
    
    success = build_exe()
    
    if success:
        print("\nüéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìã –§–∞–π–ª –≥–æ—Ç–æ–≤: dist/DataMatrixPrinter.exe")
    else:
        print("\nüí• –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏!")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter...")